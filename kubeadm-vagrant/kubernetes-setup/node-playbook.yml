---
- hosts: all
  become: true
  tasks:
    
  - name: Install containerd- Create conf file for containerd modules
    copy:
      dest: "/etc/modules-load.d/containerd.conf"
      content: |
        overlay
        br_netfilter

  - name: Install containerd- Load modules
    shell: |
      modprobe overlay
      modprobe br_netfilter

  - name: Install containerd- Setup required sysctl params, these persist across reboots
    copy:
      dest: "/etc/sysctl.d/99-kubernetes-cri.conf"
      content: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.ipv4.ip_forward                 = 1
        net.bridge.bridge-nf-call-ip6tables = 1

  - name: Install containerd- Apply sysctl params without reboot
    shell: |
      sysctl --system

  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name:  Install containerd package
    apt:
      name: containerd
      state: present

  - name: Create containerd configuration directory
    file:
      path: /etc/containerd
      state: directory

  - name: Creating containerd config file
    file:
      path: "/etc/containerd/config.toml"
      state: touch

  - name: Redirect output of containerd config command
    shell: containerd config default > "/etc/containerd/config.toml"

  - name: Restart containerd
    systemd:
      name: containerd
      state: restarted

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

  - name: Force kubelet to listen on host network IP
    copy:
      dest: "/etc/default/kubelet"
      content: |
        KUBELET_EXTRA_ARGS=--node-ip="{{ node_ip }}"

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777

  - name: Join the node to cluster
    command: sh /tmp/join-command.sh

  - name: Download crictl
    get_url:
      url: "https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{ crictl_version }}/crictl-v{{ crictl_version }}-linux-amd64.tar.gz"
      dest: /tmp

  - name: Create crictl configuration directory
    file:
      path: /etc/crictl
      state: directory

  - name: Creating crictl config file
    file:
      path: "/etc/crictl/crictl.yaml"
      state: touch

  - name: Populate crictl config file
    copy:
      dest: "/etc/crictl/crictl.yaml"
      content: |
        runtime-endpoint: unix:///run/containerd/containerd.sock
        image-endpoint: unix:///run/containerd/containerd.sock
        timeout: 10
        debug: true

  - name: Extract crictl tar into /usr/local/bin
    unarchive:
      src: "/tmp/crictl-v{{ crictl_version }}-linux-amd64.tar.gz"
      dest: /usr/local/bin
      mode: 0755
      remote_src: yes

  - stat:
      path: /dev/sdc
    register: additional_disk

  - name: Create a new primary partition in attached additional disk
    parted:
      device: /dev/sdc
      number: 1
      state: present
    when: additional_disk.stat.exists

  - name: Format additional disk
    filesystem:
      fstype: ext4
      dev: /dev/sdc1
    when: additional_disk.stat.exists

  - name: Mount the formatted disk to directory
    mount:
      path: /tmp/mnt/disk
      src: /dev/sdc1
      fstype: ext4
      opts: rw
      state: mounted
    when: additional_disk.stat.exists

  - name: Modify permissions of mount directory
    file:
      path: /tmp/mnt/disk
      state: directory
      mode: 0755
      owner: vagrant
    when: additional_disk.stat.exists
